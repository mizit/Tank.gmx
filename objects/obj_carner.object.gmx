<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_carner_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_monster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//phy_fixed_rotation = 1;
my_power = 512;
death_sprite = s_carner_death;

behavior = WALK;
attack_distance = 170;
attack_x = 50;
attack_y = -30;
attack_power = 2000;

hp = 30;


middle = noone;
m_offset = 30;
tail = noone;
t_offset = 57;
if (obj_gg.x &lt; x)
{
    middle = instance_create(x + m_offset, y, obj_carner_mid);
    physics_joint_distance_create(id, middle, x, y, middle.x, middle.y, 0);
    tail = instance_create(x + t_offset, y, obj_carner_tail);
    physics_joint_distance_create(middle, tail, middle.x, middle.y, tail.x, tail.y, 0);
}
else
{
    middle = instance_create(x - m_offset, y, obj_carner_mid);
    physics_joint_distance_create(id, middle, x, y, middle.x, middle.y, 0);
    tail = instance_create(x - t_offset, y, obj_carner_tail);
    physics_joint_distance_create(middle, tail, middle.x, middle.y, tail.x, tail.y, 0);
}
middle.owner = id;
tail.owner = middle;
ds_list_add(monster_parts, middle, tail);

ds_list_add(monster_frags, obj_carner_frag1, obj_carner_frag2, obj_carner_frag3);

stun_time = 30;
stun_counter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (behavior != DEAD)
{
    if (obj_gg.x &lt; x)
    {
        status |= LEFT;
    }
    else
    {
        status &amp;=~ LEFT;
    }
}
switch (behavior)
{
    case WALK:
    {
        if (obj_gg.x &lt; x)
        {
            physics_apply_angular_impulse(-my_power);
            image_speed = -1 / (3 / phy_speed) * sign(phy_speed_x);
            if (middle.x &lt; x) || (tail.x &lt; x)
            {
                physics_apply_local_impulse(0, 0, -45, -45);
            }
        }
        else
        {
            physics_apply_angular_impulse(my_power);
            image_speed = 1 / (3 / phy_speed) * sign(phy_speed_x);
            if (middle.x &gt; x)|| (tail.x &gt; x)
            {
                physics_apply_local_impulse(0, 0, 45, -45);
            }
        }
        if (point_distance(x, y, obj_gg.x, obj_gg.y) &lt;= attack_distance)
        {
            behavior = ATTACK;
            sprite_index = s_carner_attack;
            image_speed = 1;
        }
        break;
    }
    case ATTACK:
    {
        if (point_distance(x, y, obj_gg.x, obj_gg.y) &gt; attack_distance) &amp;&amp; (image_index &gt; image_number - 2)
        {
            behavior = WALK;
            sprite_index = s_carner_walk;
        }
        var curr_x_off;
        if (status &amp; LEFT)
        {
            curr_x_off = -attack_x;
        }
        else
        {
            curr_x_off = attack_x;
        }
        if ((image_index &gt; 3) &amp;&amp; (image_index &lt; 5) &amp;&amp; 
        collision_rectangle(x, y, x + curr_x_off, y + attack_y, obj_player, 1, 1))
        {
            with (obj_gg)
            {
                var dir = point_direction(other.x, other.y, x, y);
                physics_apply_impulse(other.x + curr_x_off, other.y, 
                lengthdir_x(other.attack_power, dir), lengthdir_y(other.attack_power, dir));
            }
        }
        break;
    }
    case STUN:
    {
        phy_rotation = 0;
        /*if (obj_gg.x &lt; x)
        {
            phy_rotation = 0;
            physics_apply_angular_impulse(my_power);
            image_speed = -1 / (3 / phy_speed) * sign(phy_speed_x);
            with(middle)
            {
                phy_rotation = 0;
                physics_apply_angular_impulse(other.my_power);
            }
            with(tail)
            {
                phy_rotation = 0;
                physics_apply_angular_impulse(other.my_power);
            }
        }
        else
        {
            phy_rotation = 0;
            physics_apply_angular_impulse(-my_power);
            image_speed = 1 / (3 / phy_speed) * sign(phy_speed_x);
            with(middle)
            {
                phy_rotation = 0;
                physics_apply_angular_impulse(-other.my_power);
            }
            with(tail)
            {
                phy_rotation = 0;
                physics_apply_angular_impulse(-other.my_power);
            }
        }*/
        stun_counter++;
        if (stun_counter &gt;= stun_time)
        {
            stun_counter = 0;
            behavior = WALK;
        }
        break;
    }
    case DEAD:
    {
        if (image_index &gt;= image_number - 1)
        {
            image_speed = 0;
        }
        break;
    }
}
middle.status = status;
tail.status = status;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>25</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>10</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,28</point>
    <point>16,60</point>
  </PhysicsShapePoints>
</object>
